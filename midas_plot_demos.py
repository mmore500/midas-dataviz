# -*- coding: utf-8 -*-
"""midas-plot-demos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14WqhKjQVXIFCWIKXtCBnhGqB5kronYL-
"""

from matplotlib import pyplot as plt
import numpy as np
import seaborn as sns

df = sns.load_dataset("titanic")
df

"""## Question: how did fare price differ between decks?


"""

sns.scatterplot(
    data=df,
    x="deck",
    y="fare",
)

sns.boxplot(
    data=df,
    x="deck",
    y="fare",
)

sns.swarmplot(
    data=df,
    x="deck",
    y="fare",
    s=3,
)

sns.swarmplot(
    data=df,
    x="deck",
    y="fare",
    hue="deck",
    s=3,
)

sns.swarmplot(
    data=df,
    x="deck",
    y="fare",
    hue="deck",
    s=3,
    legend=False,
)

sns.swarmplot(
    data=df,
    x="deck",
    y="fare",
    hue="pclass",
    s=3,
)

"""## Question: does fare vary with age?"""

sns.lineplot(
  data=df,
  x="age",
  y="fare",
)

sns.scatterplot(
  data=df,
  x="age",
  y="fare",
)

sns.scatterplot(
  data=df,
  x="age",
  y="fare",
  alpha=0.1,
)

sns.histplot(
  data=df,
  x="age",
  y="fare",
)

dfx = df.copy()
dfx["fare"] = dfx["fare"].rank()

sns.scatterplot(
  data=dfx,
  x="age",
  y="fare",
  alpha=0.5,
)

dfx = df.copy()
dfx["fare"] = np.log(dfx["fare"])

sns.scatterplot(
  data=dfx,
  x="age",
  y="fare",
  alpha=0.5,
)

dfx = df.copy()

ax = sns.scatterplot(
  data=dfx,
  x="age",
  y="fare",
  alpha=0.5,
)
ax.set_ylim((-5, dfx["fare"].quantile(0.95)))

fig, (ax3, ax2, ax1, ax0) = plt.subplots(1, 4, figsize=(15, 5))

ax0.set_title("clipped")
ax = sns.scatterplot(
  data=df,
  x="age",
  y="fare",
  alpha=0.5,
  ax=ax0,
)
ax.set_ylim((-5, df["fare"].quantile(0.95)))

dfx = df.copy()
dfx["fare"] = dfx["fare"].rank()

ax1.set_title("ranked")
sns.scatterplot(
  data=dfx,
  x="age",
  y="fare",
  alpha=0.5,
  ax=ax1,
)

ax2.set_title("log")
dfx = df.copy()
dfx["fare"] = np.log(dfx["fare"])

sns.scatterplot(
  data=dfx,
  x="age",
  y="fare",
  alpha=0.5,
  ax=ax2,
)

sns.scatterplot(
  data=df,
  x="age",
  y="fare",
  alpha=0.5,
  ax=ax3,
)
ax3.set_title("original")

"""## Question: how did cabin deck affect survival rate?"""

sns.scatterplot(
    data=df,
    x="deck",
    y="survived",
)

sns.histplot(
    data=df,
    x="deck",
    y="alive",
)

sns.histplot(
    data=df,
    x="deck",
    hue="alive",
)

sns.histplot(
    data=df,
    x="deck",
    hue="alive",
    multiple="dodge",
)

sns.histplot(
    data=df,
    x="deck",
    hue="alive",
    multiple="stack",
)

sns.histplot(
    data=df,
    x="deck",
    hue="alive",
    multiple="fill",
)

"""Question: how did cabin deck and sex affect survival?"""

sns.displot(
    data=df,
    x="deck",
    hue="alive",
    multiple="stack",
)

sns.displot(
    data=df,
    x="sex",
    hue="alive",
    col="deck",
    multiple="fill",
    col_wrap=4,
    height=2,
)

"""## Question: how did age affect survival?"""

sns.displot(
    data=df,
    x="age",
    hue="alive",
    col="sex",
    multiple="fill",
)

sns.displot(
    data=df,
    x="age",
    hue="alive",
    col="sex",
    multiple="stack",
)

sns.displot(
    data=df,
    x="age",
    hue="alive",
    col="sex",
    multiple="stack",
)

sns.stripplot(
  data=df,
  x="pclass",
  y="fare",
  alpha=0.3,
  jitter=0.45,
)

sns.boxplot(
  data=df,
  x="pclass",
  y="fare",
  hue="pclass",
  legend=False,
)

sns.violinplot(
  data=df,
  x="pclass",
  y="fare",
)

"""Styling"""

ax = sns.violinplot(
  data=df,
  x="alone",
  y="fare",
)

ax = sns.violinplot(
  data=df,
  x="alone",
  y="fare",
)
sns.stripplot(
  data=df,
  x="alone",
  y="fare",
  alpha=0.3,
  jitter=0.45,
  ax=ax,
)

"""Airline passengers"""



df = flights = sns.load_dataset("flights")
df

"""passengers over time"""

sns.lineplot(
    data=df,
    x="year",
    y="passengers",
)

sns.lineplot(
    data=df["passengers"],
)

ax = sns.lineplot(
    data=df["passengers"],
)
ax.set_ylim((0,df["passengers"].max()))

dfx = df[df["year"] < 1952]
ax = sns.lineplot(
    data=dfx["passengers"],
)

dfx = df[df["year"] < 1952]
ax = sns.lineplot(
    data=dfx["passengers"],
)
ax.set_ylim((0,dfx["passengers"].max() + 20))

"""seasonal passengers"""

ax = sns.boxplot(
    data=df,
    x="month",
    y="passengers",
)

ax = sns.relplot(
    data=df,
    x="month",
    y="passengers",
    hue="year",
)
sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1))

sns.regplot(
    x=df.index,
    y=df["passengers"],
)
sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1))

from scipy.stats import linregress

dfx = df.copy()
slope, intercept, _, _, _ = linregress(dfx.index, dfx['passengers'])
dfx['detrended passengers'] = (
    dfx['passengers'] - (slope * df.index + intercept)
) / (slope * df.index)

ax = sns.lineplot(
    data=dfx["detrended passengers"],
)

def detrend_data(group):
    slope, intercept, _, _, _ = linregress(group.index, group['passengers'])
    group['detrended passengers'] = (group['passengers'] - (slope * group.index + intercept)) / group['passengers'].mean()
    return group

# Apply the detrend function to each group
dfx = df.groupby('year').apply(detrend_data).reset_index(drop=True)


ax = sns.lineplot(data=dfx, x=dfx.index, y="detrended passengers")
ax.set_title('Detrended Passengers by Year')

def detrend_data(group):
    slope, intercept, _, _, _ = linregress(group.index, group['passengers'])
    group['detrended passengers'] = (group['passengers'] - (slope * group.index + intercept)) / group['passengers'].mean()
    return group

# Apply the detrend function to each group
dfx = df.groupby('year').apply(detrend_data).reset_index(drop=True)


sns.lineplot(data=dfx, x="month", y="detrended passengers")
ax.set_title('Detrended Passengers by Year')

def detrend_data(group):
    slope, intercept, _, _, _ = linregress(group.index, group['passengers'])
    group['detrended passengers'] = (group['passengers'] - (slope * group.index + intercept)) / group['passengers'].mean()
    return group

# Apply the detrend function to each group
dfx = df.groupby('year').apply(detrend_data).reset_index(drop=True)


sns.swarmplot(data=dfx, x="month", y="detrended passengers")

def detrend_data(group):
    slope, intercept, _, _, _ = linregress(group.index, group['passengers'])
    group['detrended passengers'] = (group['passengers'] - (slope * group.index + intercept)) / group['passengers'].mean()
    return group

# Apply the detrend function to each group
dfx = df.groupby('year').apply(detrend_data).reset_index(drop=True)


ax = sns.violinplot(data=dfx, x="month", y="detrended passengers")
sns.swarmplot(data=dfx, x="month", y="detrended passengers", ax=ax, color="white", alpha=0.8, s=3)
ax.set_title('Detrended Passengers by Year')

def detrend_data(group):
    slope, intercept, _, _, _ = linregress(group.index, group['passengers'])
    group['detrended passengers'] = (group['passengers'] - (slope * group.index + intercept)) / group['passengers'].mean()
    return group

# Apply the detrend function to each group
dfx = df.groupby('year').apply(detrend_data).reset_index(drop=True)


ax = sns.swarmplot(data=dfx, x="month", y="detrended passengers")
sns.lineplot(data=dfx, x="month", y="detrended passengers", ax=ax, errorbar=None)
ax.set_title('Detrended Passengers by Year')